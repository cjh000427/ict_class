게시물 목록 조회
==============================================

PostApiController
@requestMapping '/api/v1/posts' -GET rest API꾸미는 방식

DTO나누기!
데이터 트랜스퍼 오브젝트- 클라이언트와 소통을 위해 만듬
내가 만든것이 json이 됨 - 클라이언트와 명세를 같이한 부분의 형태!

먼저 엔티티Post 정의
post는 테이블과 긴밀함.

PostApiController 에서 @Getmapping ResponseEntity<?>메소드 정의 PageDTO객체 받는다.
ex)page=5 size=10

PostListResponseDTO dto 선언 = 전달된 페이지 정보(PageDTO)를 PostService에게 전달
PostService는 PostListResponseDTO의 형태를 리턴해준다!

PostListResponseDTO 에는 총게시물 수 페이지 렌더링 게시물 렌더링 정보
PageResponseDTO info 객체형태로 온다. 시작, 끝, 현재 등 여러정보
게시글도 여러개이므로 리스트로 가져온다 List<PostDetailResponseDTO>에 저자, 제목 ,내용, 해시태그 등..


불필요한 값은 제거한 깔끔한 json 형태를 제작 위해 DTO 작성.
ex) PostDetailResponseDTO 엔 id 수정시간이 없다.

그렇다면 PostService에는
메서드 getPosts에 PageDTO 받는다. PostRepository와 HashTagRepository를 주입받는다.

JPA의 findAll선언- 사용자가 선택한 페이지 정보를 전달. pageable받는다. Page타입의<Post> 페이지정보와 -게시글정보 분리할것임
그러나 pageDto에는 바로 못가.

Pageable객체 생성해서 페이지정보를 만든다. PageRequest.of(다형성)

List<Post> postList 에서 게시물 정보만 꺼내. 근데 엔티티를 DTO로 변환해야한다.
List<PostDetailResponseDTO> detailList

PostDetailResponseDTO 생성자를 생성해 post를 전달하고 매칭되는 곳에 전달.
그러나 hashTag는 엔티티와 post의 서로 타입이 달라 변환해줘야한다. 

List<HashTag>
(스트림방식)
그것이 hastTage = post.getHashtag().stream().map(HashTag::getTagName)--리스트내부의 내용을 일괄적으로 적용하겠다는뜻
.collect(Collectors.toList());

List<PostDetailResponseDTO> detailList에서 또 스트림
객체하나올때마다 PostDetailResponseDTO생성해서 다시 map으로 PostDetailResponseDTO타입으로 리스트 저장. --일괄처리

그럼
DB에서 조회한 정보 DTO로 변환도 해줘야한다.
PostListResponseDTO로 리턴. 그타입으로 선언했으니까!
총게시물수가 아니라 조회된 게시물의 수.
PageResPonseDTO생성자에게 Page정보 Page<Post>posts 전달


PageResPonseDTO에서 받은 Page<T>pageData--제네릭
페이징 크리에이터같은 데이터그냥 뽑아내는중.


그럼 service는 Controller에서 호출됬잖아

그런 선언된PostListResponseDTO dto 에 다 들어가는거지
그게 ResponseEntity로 리턴

posts는 배열 안에 리스트로 존재 Post -> dto로 변환하고 json으로 전달





























